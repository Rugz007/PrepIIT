[{"/workspace/frontend/src/components/Footer.tsx":"1","/workspace/frontend/src/components/Test/QuestionComponents/InputComponent.tsx":"2","/workspace/frontend/src/index.tsx":"3","/workspace/frontend/src/context/User/UserReducer.tsx":"4","/workspace/frontend/src/components/Test/QuestionComponents/MCQComponent.tsx":"5","/workspace/frontend/src/components/Dashboard/Questions/QuestionBank.tsx":"6","/workspace/frontend/src/components/Dashboard/Questions/DifficultyLevel.js":"7","/workspace/frontend/src/components/Dashboard/Questions/QuestionModal.tsx":"8","/workspace/frontend/src/components/Dashboard/Blogs/BlogsTable.tsx":"9","/workspace/frontend/src/components/Dashboard/Blogs/CreateBlog.tsx":"10","/workspace/frontend/src/views/Dashboard/Dashboard.tsx":"11","/workspace/frontend/src/components/Dashboard/EForms/EForms.tsx":"12","/workspace/frontend/src/reportWebVitals.ts":"13","/workspace/frontend/src/components/Navbar.tsx":"14","/workspace/frontend/src/components/Test/TestDetails.tsx":"15","/workspace/frontend/src/components/Dashboard/Profile/Profile.tsx":"16","/workspace/frontend/src/components/Dashboard/EForms/EFormSettings.tsx":"17","/workspace/frontend/src/components/Dashboard/Tests/TestsPage.tsx":"18","/workspace/frontend/src/components/Dashboard/Tests/TestTypes.tsx":"19","/workspace/frontend/src/components/Dashboard/EForms/EFormModal.tsx":"20","/workspace/frontend/src/components/Dashboard/Tests/TestTypeModal.tsx":"21","/workspace/frontend/src/components/Util/AdvTable.jsx":"22","/workspace/frontend/src/components/Dashboard/Questions/ReportedQuestions.tsx":"23","/workspace/frontend/src/components/Dashboard/Tests/LiveTests.tsx":"24","/workspace/frontend/src/components/Dashboard/Questions/AddQuestion.tsx":"25","/workspace/frontend/src/components/HomePage/CourseDescription.tsx":"26","/workspace/frontend/src/views/HomePage/Contact.tsx":"27","/workspace/frontend/src/views/Analysis/TestAnalysis.tsx":"28","/workspace/frontend/src/components/Errors/Error400.tsx":"29"},{"size":4128,"mtime":1623729426867,"results":"30","hashOfConfig":"31"},{"size":1313,"mtime":1624685288007,"results":"32","hashOfConfig":"33"},{"size":607,"mtime":1620967231323,"results":"34","hashOfConfig":"33"},{"size":1560,"mtime":1622954652448,"results":"35","hashOfConfig":"31"},{"size":2113,"mtime":1619249443005,"results":"36","hashOfConfig":"31"},{"size":5381,"mtime":1624433683113,"results":"37","hashOfConfig":"31"},{"size":223,"mtime":1620967231319,"results":"38","hashOfConfig":"33"},{"size":10036,"mtime":1624430712765,"results":"39","hashOfConfig":"31"},{"size":2303,"mtime":1624685288007,"results":"40","hashOfConfig":"33"},{"size":3298,"mtime":1624259715267,"results":"41","hashOfConfig":"31"},{"size":5345,"mtime":1624685288007,"results":"42","hashOfConfig":"33"},{"size":2872,"mtime":1624428047321,"results":"43","hashOfConfig":"31"},{"size":440,"mtime":1614962687762,"results":"44","hashOfConfig":"31"},{"size":8255,"mtime":1624685288007,"results":"45","hashOfConfig":"33"},{"size":2936,"mtime":1619277214980,"results":"46","hashOfConfig":"31"},{"size":4055,"mtime":1621069712679,"results":"47","hashOfConfig":"31"},{"size":2038,"mtime":1624685288007,"results":"48","hashOfConfig":"33"},{"size":3939,"mtime":1624427999185,"results":"49","hashOfConfig":"31"},{"size":2215,"mtime":1624428524469,"results":"50","hashOfConfig":"31"},{"size":1837,"mtime":1623729436459,"results":"51","hashOfConfig":"31"},{"size":6404,"mtime":1624428478793,"results":"52","hashOfConfig":"31"},{"size":881,"mtime":1624428799329,"results":"53","hashOfConfig":"31"},{"size":3249,"mtime":1624427971665,"results":"54","hashOfConfig":"31"},{"size":2190,"mtime":1624427983265,"results":"55","hashOfConfig":"31"},{"size":3074,"mtime":1625636952207,"results":"56","hashOfConfig":"33"},{"size":5847,"mtime":1620967231323,"results":"57","hashOfConfig":"33"},{"size":1997,"mtime":1620967231327,"results":"58","hashOfConfig":"33"},{"size":7376,"mtime":1625636952211,"results":"59","hashOfConfig":"33"},{"size":395,"mtime":1620967231323,"results":"60","hashOfConfig":"33"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"1b3atdm",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1knvjbr",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/workspace/frontend/src/components/Footer.tsx",[],["121","122"],"/workspace/frontend/src/components/Test/QuestionComponents/InputComponent.tsx",[],"/workspace/frontend/src/index.tsx",[],"/workspace/frontend/src/context/User/UserReducer.tsx",[],"/workspace/frontend/src/components/Test/QuestionComponents/MCQComponent.tsx",["123","124"],"/workspace/frontend/src/components/Dashboard/Questions/QuestionBank.tsx",[],"/workspace/frontend/src/components/Dashboard/Questions/DifficultyLevel.js",[],"/workspace/frontend/src/components/Dashboard/Questions/QuestionModal.tsx",[],"/workspace/frontend/src/components/Dashboard/Blogs/BlogsTable.tsx",["125"],"/workspace/frontend/src/components/Dashboard/Blogs/CreateBlog.tsx",[],"/workspace/frontend/src/views/Dashboard/Dashboard.tsx",[],"/workspace/frontend/src/components/Dashboard/EForms/EForms.tsx",["126"],"/workspace/frontend/src/reportWebVitals.ts",[],"/workspace/frontend/src/components/Navbar.tsx",["127"],"/workspace/frontend/src/components/Test/TestDetails.tsx",[],"/workspace/frontend/src/components/Dashboard/Profile/Profile.tsx",[],"/workspace/frontend/src/components/Dashboard/EForms/EFormSettings.tsx",[],"/workspace/frontend/src/components/Dashboard/Tests/TestsPage.tsx",["128"],"/workspace/frontend/src/components/Dashboard/Tests/TestTypes.tsx",["129"],"/workspace/frontend/src/components/Dashboard/EForms/EFormModal.tsx",[],"/workspace/frontend/src/components/Dashboard/Tests/TestTypeModal.tsx",["130","131"],"import { Button, Modal, Form, Select, Space, Input, TimePicker, Divider, message } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport axios from \"axios\";\n\n\nconst { REACT_APP_NODEJS_URL } = process.env;\n\nconst { Option } = Select;\ninterface TestTypeInterface {\n  Test?: {\n    testTypeID: number;\n    testname: string;\n    subjectsallowed: string[];\n    questions: Array<{\n      type: string;\n      correct: number;\n      wrong: number;\n      nullanswer: number;\n      number: number;\n    }>;\n  };\n  buttonText: string;\n  getFunction?: Function;\n}\nexport const TestTypeModal: React.FC<TestTypeInterface> = ({\n  Test,\n  buttonText,\n  getFunction\n}) => {\n  const [visible, setVisible] = useState(false);\n  const [form] = Form.useForm();\n  const [time, setTime] = useState('')\n  const toSubmit = (e: any) => {\n    console.log(e);\n  };\n  useEffect(() => {\n    console.log(Test)\n  }, [Test])\n  const SubmitTest = async (values: TestTypeInterface) => {\n    console.log(values);\n    try {\n      const response = await axios.post(\n        `http://${REACT_APP_NODEJS_URL}/admin/statictest`,\n        {\n          values,\n          //time,\n        },\n        {\n          headers: {\n            authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n          },\n        }\n      );\n      message.success(\"Created a test sucessfully!\")\n      if (getFunction) {\n        getFunction();\n      }\n    } catch (e) {\n      console.log(e)\n      message.error(\"Something went wrong\")\n    }\n  };\n  const onChangeTime = (value: any, timeString: string) => {\n    setTime(timeString)\n  }\n  return (\n    <>\n      <Button onClick={() => setVisible(true)}>{buttonText}</Button>\n      <Modal\n        width=\"60%\"\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        onOk={() => {\n          var values = form.getFieldsValue();\n          console.log(values);\n          form.resetFields();\n          if (Test !== undefined) {\n            values.qid = Test.testTypeID;\n          } else {\n            SubmitTest(values);\n          }\n          setVisible(false);\n        }}\n      >\n        <h1>Create Static Test</h1>\n        <Divider />\n        <br />\n        <Form\n          name=\"TestType\"\n          layout=\"vertical\"\n          form={form}\n          onFinish={toSubmit}\n          initialValues={Test}\n        >\n          <Form.Item label=\"Test Name\" name=\"testname\">\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"Subjects\" name=\"subjectsallowed\">\n            <Select mode=\"multiple\">\n              <Option value=\"physics\" label=\"Physics\">\n                Physics\n              </Option>\n              <Option value=\"chemistry\" label=\"Chemistry\">\n                Chemistry\n              </Option>\n              <Option value=\"maths\" label=\"Maths\">\n                Maths\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.List name=\"questions\">\n            {(fields, { add, remove }) => (\n              <>\n                {fields.map((field) => (\n                  <Space\n                    key={field.key}\n                    style={{ display: \"flex\", marginBottom: 8, width: \"100%\" }}\n                    align=\"baseline\"\n                  >\n                    <Form.Item\n                      shouldUpdate={(prevValues, curValues) =>\n                        prevValues.area !== curValues.area ||\n                        prevValues.sights !== curValues.sights\n                      }\n                    >\n                      {() => (\n                        <Form.Item\n                          {...field}\n                          name={[field.name, \"type\"]}\n                          label=\"Question Type\"\n                        >\n                          <Select placeholder='Select Question Type'>\n                            <Option value=\"mcq\">MCQ</Option>\n                            <Option value=\"fib\">Fill in the blanks</Option>\n                            <Option value=\"anr\">Assertion and Reason</Option>\n                            <Option value=\"tof\">True or False</Option>\n                            <Option value=\"num\">Numerical Question</Option>\n                            <Option value=\"mtf\">\n                              Match the Following Questions\n                            </Option>\n                          </Select>\n                        </Form.Item>\n                      )}\n                    </Form.Item>\n\n                    <Form.Item\n                      {...field}\n                      fieldKey={[field.fieldKey, \"number\"]}\n                      name={[field.name, \"number\"]}\n                      label=\"Number of Questions\"\n                    >\n                      <Input />\n                    </Form.Item>\n                    <Form.Item\n                      {...field}\n                      fieldKey={[field.fieldKey, \"correct\"]}\n                      name={[field.name, \"correct\"]}\n                      label=\"Correct Answer Marks\"\n                    >\n                      <Input />\n                    </Form.Item>\n                    <Form.Item\n                      {...field}\n                      name={[field.name, \"wrong\"]}\n                      label=\"Wrong Answer Marks\"\n                    >\n                      <Input />\n                    </Form.Item>\n                    <Form.Item\n                      {...field}\n                      name={[field.name, \"nullanswer\"]}\n                      label=\"No Answer Marks\"\n                    >\n                      <Input />\n                    </Form.Item>\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\n                  </Space>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add field\n                  </Button>\n                </Form.Item>\n              </>\n            )}\n          </Form.List>\n          <Form.Item name='startDate' label=\"Select time of test [HH:mm]\">\n            <Space direction=\"horizontal\" size={12}>\n              <TimePicker onChange={onChangeTime} format={\"HH:mm\"} />\n            </Space>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};\n","/workspace/frontend/src/components/Util/AdvTable.jsx",[],"/workspace/frontend/src/components/Dashboard/Questions/ReportedQuestions.tsx",["132"],"/workspace/frontend/src/components/Dashboard/Tests/LiveTests.tsx",["133","134"],"/workspace/frontend/src/components/Dashboard/Questions/AddQuestion.tsx",["135"],"/workspace/frontend/src/components/HomePage/CourseDescription.tsx",["136","137"],"/workspace/frontend/src/views/HomePage/Contact.tsx",[],"/workspace/frontend/src/views/Analysis/TestAnalysis.tsx",["138"],"/workspace/frontend/src/components/Errors/Error400.tsx",[],{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":25,"column":7,"nodeType":"145","messageId":"146","endLine":25,"endColumn":12},{"ruleId":"143","severity":1,"message":"147","line":36,"column":7,"nodeType":"145","messageId":"146","endLine":36,"endColumn":11},{"ruleId":"143","severity":1,"message":"148","line":1,"column":33,"nodeType":"145","messageId":"146","endLine":1,"endColumn":38},{"ruleId":"143","severity":1,"message":"148","line":1,"column":16,"nodeType":"145","messageId":"146","endLine":1,"endColumn":21},{"ruleId":"143","severity":1,"message":"149","line":125,"column":10,"nodeType":"145","messageId":"146","endLine":125,"endColumn":17},{"ruleId":"143","severity":1,"message":"148","line":1,"column":40,"nodeType":"145","messageId":"146","endLine":1,"endColumn":45},{"ruleId":"150","severity":1,"message":"151","line":60,"column":6,"nodeType":"152","endLine":60,"endColumn":8,"suggestions":"153"},{"ruleId":"143","severity":1,"message":"154","line":33,"column":10,"nodeType":"145","messageId":"146","endLine":33,"endColumn":14},{"ruleId":"143","severity":1,"message":"155","line":43,"column":13,"nodeType":"145","messageId":"146","endLine":43,"endColumn":21},{"ruleId":"143","severity":1,"message":"148","line":1,"column":16,"nodeType":"145","messageId":"146","endLine":1,"endColumn":21},{"ruleId":"143","severity":1,"message":"148","line":1,"column":16,"nodeType":"145","messageId":"146","endLine":1,"endColumn":21},{"ruleId":"150","severity":1,"message":"151","line":61,"column":6,"nodeType":"152","endLine":61,"endColumn":8,"suggestions":"156"},{"ruleId":"143","severity":1,"message":"155","line":35,"column":13,"nodeType":"145","messageId":"146","endLine":35,"endColumn":21},{"ruleId":"150","severity":1,"message":"157","line":50,"column":8,"nodeType":"152","endLine":50,"endColumn":41,"suggestions":"158"},{"ruleId":"150","severity":1,"message":"159","line":50,"column":9,"nodeType":"160","endLine":50,"endColumn":40},{"ruleId":"150","severity":1,"message":"161","line":52,"column":6,"nodeType":"152","endLine":52,"endColumn":8,"suggestions":"162"},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"@typescript-eslint/no-unused-vars","'Latex' is assigned a value but never used.","Identifier","unusedVar","'temp' is assigned a value but never used.","'Table' is defined but never used.","'current' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchTestDetails'. Either include it or remove the dependency array.","ArrayExpression",["165"],"'time' is assigned a value but never used.","'response' is assigned a value but never used.",["166"],"React Hook useEffect has missing dependencies: 'courseData' and 'location.pathname'. Either include them or remove the dependency array.",["167"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useEffect has missing dependencies: 'location.pathname' and 'test'. Either include them or remove the dependency array.",["168"],"no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"169","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},"Update the dependencies array to be: [fetchTestDetails]",{"range":"176","text":"177"},{"range":"178","text":"177"},"Update the dependencies array to be: [courseData, location.pathname]",{"range":"179","text":"180"},"Update the dependencies array to be: [location.pathname, test]",{"range":"181","text":"182"},[1304,1306],"[fetchTestDetails]",[1314,1316],[1711,1744],"[courseData, location.pathname]",[1601,1603],"[location.pathname, test]"]