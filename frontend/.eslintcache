[{"/workspace/frontend/src/context/User/UserState.tsx":"1","/workspace/frontend/src/views/Auth/Register.tsx":"2","/workspace/frontend/src/views/HomePage/About.tsx":"3","/workspace/frontend/src/components/Errors/Error400.tsx":"4","/workspace/frontend/src/components/Dashboard/EForms/EFormsAnalysis.tsx":"5","/workspace/frontend/src/components/Dashboard/Questions/DifficultyLevel.js":"6","/workspace/frontend/src/views/Auth/Login.tsx":"7","/workspace/frontend/src/components/Dashboard/Questions/AddQuestionPage.tsx":"8","/workspace/frontend/src/components/Dashboard/Blogs/CreateBlog.tsx":"9","/workspace/frontend/src/components/Dashboard/Questions/QuestionModal.tsx":"10","/workspace/frontend/src/components/Dashboard/Questions/QuestionBank.tsx":"11","/workspace/frontend/src/reportWebVitals.ts":"12","/workspace/frontend/src/views/HomePage/FAQ.tsx":"13","/workspace/frontend/src/components/Test/QuestionComponent.tsx":"14","/workspace/frontend/src/components/Dashboard/Profile/Profile.tsx":"15"},{"size":2579,"mtime":1613446567358,"results":"16","hashOfConfig":"17"},{"size":5850,"mtime":1613446567398,"results":"18","hashOfConfig":"17"},{"size":5368,"mtime":1613446567398,"results":"19","hashOfConfig":"17"},{"size":182,"mtime":1613446567354,"results":"20","hashOfConfig":"17"},{"size":299,"mtime":1613446567314,"results":"21","hashOfConfig":"17"},{"size":223,"mtime":1613461767240,"results":"22","hashOfConfig":"17"},{"size":3113,"mtime":1613446567394,"results":"23","hashOfConfig":"17"},{"size":541,"mtime":1613446567314,"results":"24","hashOfConfig":"17"},{"size":1566,"mtime":1613446567302,"results":"25","hashOfConfig":"17"},{"size":5838,"mtime":1613660866679,"results":"26","hashOfConfig":"17"},{"size":3058,"mtime":1613626244267,"results":"27","hashOfConfig":"17"},{"size":440,"mtime":1613446567358,"results":"28","hashOfConfig":"17"},{"size":8404,"mtime":1613446567434,"results":"29","hashOfConfig":"17"},{"size":464,"mtime":1613446567354,"results":"30","hashOfConfig":"17"},{"size":1619,"mtime":1613446567314,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1b3atdm",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/workspace/frontend/src/context/User/UserState.tsx",[],["66","67"],"/workspace/frontend/src/views/Auth/Register.tsx",["68"],"import Layout, { Content } from \"antd/lib/layout/layout\";\r\nimport React, { useContext } from \"react\";\r\nimport { Row, Col, Form, Input, Card, Divider, Button, Select } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  KeyOutlined,\r\n  MailOutlined,\r\n  PhoneOutlined,\r\n  HomeOutlined,\r\n  AccountBookOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport UserContext from \"../../context/User/UserContext\";\r\nconst { Option } = Select;\r\ninterface RegisterInterface {\r\n  name: string;\r\n  email: string;\r\n  phone_no: string;\r\n  address: string;\r\n  standard: string;\r\n  password: string;\r\n  confirmPassword?: string;\r\n}\r\n\r\nexport const Register: React.FC = () => {\r\n  let history = useHistory();\r\n\r\n  const userContext = useContext(UserContext);\r\n  const onFinish = (values: RegisterInterface) => {\r\n    delete values.confirmPassword;\r\n    userContext.register(values);\r\n    history.push(\"/login\");\r\n  };\r\n  return (\r\n    <Layout>\r\n      <Content style={{ backgroundColor: \"#2a323c\", paddingBottom: \"4%\" }}>\r\n        <Row>\r\n          <Col span={4} />\r\n          <Col span={16} style={{ padding: \".4%\", paddingTop: \"1%\" }}>\r\n            <Card\r\n              style={{ height: \"100%\", borderRadius: \"17px\", margin: \"0% 30%\" }}\r\n            >\r\n              <img\r\n                src=\"logo-nobg.png\"\r\n                alt=\"logo\"\r\n                style={{ width: \"46%\", margin: \"auto\" }}\r\n              />\r\n              <h1 style={{ fontSize: \"25px\", marginBottom: \"0\" }}>\r\n                Create new account\r\n              </h1>\r\n              <Divider />\r\n              <Form\r\n                name=\"register\"\r\n                onFinish={onFinish}\r\n                scrollToFirstError\r\n                style={{ textAlign: \"left\" }}\r\n              >\r\n                <Form.Item name=\"name\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    prefix={<UserOutlined />}\r\n                    placeholder={\"Enter your name.\"}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  name=\"email\"\r\n                  rules={[\r\n                    {\r\n                      type: \"email\",\r\n                      message: \"The input is not valid E-mail!\",\r\n                    },\r\n                    {\r\n                      required: true,\r\n                      message: \"Please input your E-mail!\",\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Input\r\n                    size=\"large\"\r\n                    prefix={<MailOutlined />}\r\n                    placeholder={\"Enter your Email ID.\"}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item name=\"phone_no\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    prefix={<PhoneOutlined />}\r\n                    placeholder={\"Enter your phone number.\"}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item name=\"address\">\r\n                  <Input\r\n                    size=\"large\"\r\n                    prefix={<HomeOutlined />}\r\n                    placeholder={\"Enter your Address.\"}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item name=\"class\">\r\n                  <Select placeholder={\"Select your class.\"}>\r\n                    <Option value=\"VII\">VII</Option>\r\n                    <Option value=\"VIII\">VIII</Option>\r\n                    <Option value=\"IX\">IX</Option>\r\n                    <Option value=\"X\">X</Option>\r\n                    <Option value=\"XI\">XI</Option>\r\n                    <Option value=\"XII\">XII</Option>\r\n                  </Select>\r\n                </Form.Item>\r\n                <Form.Item\r\n                  name=\"password\"\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: \"Please input your password!\",\r\n                    },\r\n                  ]}\r\n                  hasFeedback\r\n                >\r\n                  <Input.Password\r\n                    size=\"large\"\r\n                    prefix={<KeyOutlined />}\r\n                    placeholder={\"Enter your Password.\"}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  name=\"confirmPassword\"\r\n                  hasFeedback\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: \"Please confirm your password!\",\r\n                    },\r\n                    ({ getFieldValue }) => ({\r\n                      validator(_, value) {\r\n                        if (!value || getFieldValue(\"password\") === value) {\r\n                          return Promise.resolve();\r\n                        }\r\n\r\n                        return Promise.reject(\r\n                          \"The two passwords that you entered do not match!\"\r\n                        );\r\n                      },\r\n                    }),\r\n                  ]}\r\n                >\r\n                  <Input.Password\r\n                    size=\"large\"\r\n                    prefix={<KeyOutlined />}\r\n                    placeholder={\"Re-enter your Password.\"}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    htmlType=\"submit\"\r\n                    size=\"large\"\r\n                    style={{ width: \"100%\", margin: \"auto\" }}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Form.Item>\r\n              </Form>\r\n              <Divider />\r\n              <p>\r\n                Already have an account? <Link to=\"/login\">Login</Link>\r\n              </p>\r\n            </Card>\r\n          </Col>\r\n\r\n          <Col span={4} />\r\n        </Row>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n};\r\n",["69","70"],"/workspace/frontend/src/views/HomePage/About.tsx",[],"/workspace/frontend/src/components/Errors/Error400.tsx",[],"/workspace/frontend/src/components/Dashboard/EForms/EFormsAnalysis.tsx",[],"/workspace/frontend/src/components/Dashboard/Questions/DifficultyLevel.js",[],"/workspace/frontend/src/views/Auth/Login.tsx",["71","72","73"],"import Layout, { Content } from \"antd/lib/layout/layout\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { Row, Col, Form, Input, Card, Divider, Button } from \"antd\";\r\nimport { UserOutlined, KeyOutlined } from \"@ant-design/icons\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport UserContext from \"../../context/User/UserContext\";\r\n\r\ninterface LoginInterface {\r\n  email: string;\r\n  password: string;\r\n}\r\nexport const Login: React.FC = () => {\r\n  let history = useHistory();\r\n  const userContext = useContext(UserContext);\r\n\r\n  const onFinish = (values: LoginInterface) => {\r\n    userContext.login(values);\r\n    history.push(\"/dashboard\");\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <Content style={{ backgroundColor: \"#2a323c\", paddingBottom: \"13.2%\" }}>\r\n        <Row>\r\n          <Col span={4} />\r\n          <Col span={16} style={{ padding: \".4%\", paddingTop: \"4%\" }}>\r\n            <Card\r\n              bordered={false}\r\n              style={{ height: \"100%\", borderRadius: \"17px\", margin: \"0% 30%\" }}\r\n            >\r\n              <img\r\n                src=\"logo-nobg.png\"\r\n                alt=\"logo\"\r\n                style={{ width: \"50%\", margin: \"auto\" }}\r\n              />\r\n              <h1 style={{ fontSize: \"25px\", marginBottom: \"0\" }}>Login</h1>\r\n              <Divider />\r\n              <Form\r\n                name=\"enquiry\"\r\n                onFinish={onFinish}\r\n                scrollToFirstError\r\n                style={{ textAlign: \"left\" }}\r\n              >\r\n                <Form.Item\r\n                  name=\"email\"\r\n                  rules={[\r\n                    {\r\n                      type: \"email\",\r\n                      message: \"The input is not valid E-mail!\",\r\n                    },\r\n                    {\r\n                      required: true,\r\n                      message: \"Please input your E-mail!\",\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Input\r\n                    size=\"large\"\r\n                    prefix={<UserOutlined />}\r\n                    placeholder={\"Enter your Email ID.\"}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item name=\"password\">\r\n                  <Input.Password\r\n                    size=\"large\"\r\n                    prefix={<KeyOutlined />}\r\n                    placeholder={\"Enter your Password.\"}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    htmlType=\"submit\"\r\n                    size=\"large\"\r\n                    style={{ width: \"100%\", margin: \"auto\" }}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Form.Item>\r\n              </Form>\r\n              <a>Forgot Password?</a>\r\n              <Divider />\r\n              <p>\r\n                Don't have an account? <Link to=\"/register\">Register!</Link>\r\n              </p>\r\n            </Card>\r\n          </Col>\r\n\r\n          <Col span={4} />\r\n        </Row>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n};\r\n","/workspace/frontend/src/components/Dashboard/Questions/AddQuestionPage.tsx",[],"/workspace/frontend/src/components/Dashboard/Blogs/CreateBlog.tsx",[],"/workspace/frontend/src/components/Dashboard/Questions/QuestionModal.tsx",[],"/workspace/frontend/src/components/Dashboard/Questions/QuestionBank.tsx",["74"],"/workspace/frontend/src/reportWebVitals.ts",[],"/workspace/frontend/src/views/HomePage/FAQ.tsx",[],"/workspace/frontend/src/components/Test/QuestionComponent.tsx",[],"/workspace/frontend/src/components/Dashboard/Profile/Profile.tsx",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":10,"column":3,"nodeType":"81","messageId":"82","endLine":10,"endColumn":22},{"ruleId":"75","replacedBy":"83"},{"ruleId":"77","replacedBy":"84"},{"ruleId":"79","severity":1,"message":"85","line":2,"column":29,"nodeType":"81","messageId":"82","endLine":2,"endColumn":37},{"ruleId":"79","severity":1,"message":"86","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":13},{"ruleId":"87","severity":1,"message":"88","line":82,"column":15,"nodeType":"89","endLine":82,"endColumn":18},{"ruleId":"79","severity":1,"message":"90","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":12},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"@typescript-eslint/no-unused-vars","'AccountBookOutlined' is defined but never used.","Identifier","unusedVar",["91"],["92"],"'useState' is defined but never used.","'axios' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Item' is defined but never used.","no-global-assign","no-unsafe-negation"]