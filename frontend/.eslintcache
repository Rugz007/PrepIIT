[{"/workspace/frontend/src/App.tsx":"1","/workspace/frontend/src/components/Navbar.tsx":"2","/workspace/frontend/src/components/HomePage/EnquiryForm.tsx":"3","/workspace/frontend/src/views/HomePage/HomePage.tsx":"4","/workspace/frontend/src/views/Auth/Login.tsx":"5","/workspace/frontend/src/routes.js":"6","/workspace/frontend/src/views/Auth/Register.tsx":"7","/workspace/frontend/src/views/Dashboard/Dashboard.tsx":"8","/workspace/frontend/src/components/Dashboard/EForms.tsx":"9","/workspace/frontend/src/views/HomePage/About.tsx":"10","/workspace/frontend/src/index.tsx":"11","/workspace/frontend/src/views/HomePage/CourseData.js":"12","/workspace/frontend/src/reportWebVitals.ts":"13","/workspace/frontend/src/views/HomePage/FAQ.tsx":"14","/workspace/frontend/src/components/Footer.tsx":"15","/workspace/frontend/src/views/HomePage/Courses.tsx":"16"},{"size":446,"mtime":1612242942540,"results":"17","hashOfConfig":"18"},{"size":1634,"mtime":1612165632356,"results":"19","hashOfConfig":"18"},{"size":3598,"mtime":1612154301716,"results":"20","hashOfConfig":"18"},{"size":3394,"mtime":1612247548164,"results":"21","hashOfConfig":"18"},{"size":2922,"mtime":1612111141902,"results":"22","hashOfConfig":"18"},{"size":1121,"mtime":1612165609460,"results":"23","hashOfConfig":"18"},{"size":5365,"mtime":1611912636064,"results":"24","hashOfConfig":"18"},{"size":1518,"mtime":1612242987332,"results":"25","hashOfConfig":"18"},{"size":1166,"mtime":1612242692240,"results":"26","hashOfConfig":"18"},{"size":2152,"mtime":1612118616466,"results":"27","hashOfConfig":"18"},{"size":500,"mtime":1611552045273,"results":"28","hashOfConfig":"18"},{"size":976,"mtime":1612246700820,"results":"29","hashOfConfig":"18"},{"size":425,"mtime":1611552045273,"results":"30","hashOfConfig":"18"},{"size":109,"mtime":1612165622336,"results":"31","hashOfConfig":"18"},{"size":2519,"mtime":1612322303164,"results":"32","hashOfConfig":"18"},{"size":8466,"mtime":1612456905111,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b3atdm",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/workspace/frontend/src/App.tsx",[],"/workspace/frontend/src/components/Navbar.tsx",[],["70","71"],"/workspace/frontend/src/components/HomePage/EnquiryForm.tsx",[],"/workspace/frontend/src/views/HomePage/HomePage.tsx",[],"/workspace/frontend/src/views/Auth/Login.tsx",["72","73","74"],"import Layout, { Content } from 'antd/lib/layout/layout';\nimport React, { useState } from 'react';\nimport { Row, Col, Form, Input, Card, Divider, Button } from 'antd';\nimport { UserOutlined, KeyOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\n\nexport const Login: React.FC = () => {\n    const onFinish = () => {\n        \n    };\n    const [state, setstate] = useState({\n        email: '',\n        password: '',\n    });\n    return (\n        <Layout>\n            <Content style={{ backgroundColor: '#2a323c' }}>\n                <Row >\n                    <Col span={4} />\n                    <Col span={16} style={{ padding: '.4%', paddingTop: '4%' }}>\n                        <Card bordered={false} style={{ height: '100%', borderRadius: '17px', margin: '0% 30%' }}>\n                            <img src='logo-nobg.png' alt='logo' style={{ width: '50%', margin: 'auto' }} />\n                            <h1 style={{ fontSize: '25px', marginBottom: '0' }}>Login</h1>\n                            <Divider />\n                            <Form\n                                name=\"enquiry\"\n                                onFinish={onFinish}\n                                scrollToFirstError\n                                style={{ textAlign: 'left' }}\n                            >\n                                <Form.Item name=\"email\"\n                                    rules={[\n                                        {\n                                            type: 'email',\n                                            message: 'The input is not valid E-mail!',\n                                        },\n                                        {\n                                            required: true,\n                                            message: 'Please input your E-mail!',\n                                        },\n                                    ]}>\n                                    <Input size='large' prefix={<UserOutlined />} placeholder={'Enter your Email ID.'} />\n                                </Form.Item>\n                                <Form.Item name=\"password\">\n                                    <Input.Password size='large' prefix={<KeyOutlined />} placeholder={'Enter your Password.'} />\n                                </Form.Item>\n                                <Form.Item>\n                                    <Button type='primary' size='large' style={{ width: '100%', margin: 'auto' }}>Submit</Button>\n                                </Form.Item>\n                            </Form>\n                            <a>Forgot Password?</a>\n                            <Divider />\n                            <p>Don't have an account? <Link to='/register'>Register!</Link></p>\n                        </Card>\n                    </Col>\n\n                    <Col span={4} />\n                </Row>\n            </Content>\n        </Layout>\n    );\n}","/workspace/frontend/src/routes.js",[],"/workspace/frontend/src/views/Auth/Register.tsx",["75"],"import Layout, { Content } from 'antd/lib/layout/layout';\nimport React, { useState } from 'react';\nimport { Row, Col, Form, Input, Card, Divider, Button } from 'antd';\nimport { UserOutlined, KeyOutlined, MailOutlined, PhoneOutlined, HomeOutlined, AccountBookOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\n\nexport const Register: React.FC = () => {\n    const onFinish = (values: any) => {\n        console.log('Received values of form: ', values);\n    };\n\n    return (\n        <Layout>\n            <Content style={{ backgroundColor: '#2a323c' }}>\n                <Row >\n                    <Col span={4} />\n                    <Col span={16} style={{ padding: '.4%', paddingTop: '1%' }}>\n                        <Card style={{ height: '100%', borderRadius: '17px', margin: '0% 30%' }}>\n                            <img src='logo-nobg.png' alt='logo' style={{ width: '46%', margin: 'auto' }} />\n                            <h1 style={{ fontSize: '25px', marginBottom: '0' }}>Create new account</h1>\n                            <Divider />\n                            <Form\n                                name=\"register\"\n                                onFinish={onFinish}\n                                scrollToFirstError\n                                style={{ textAlign: 'left' }}\n                            >\n                                <Form.Item name=\"name\">\n                                    <Input size='large' prefix={<UserOutlined />} placeholder={'Enter your name.'} />\n                                </Form.Item>\n                                <Form.Item name=\"email\"\n                                    rules={[\n                                        {\n                                            type: 'email',\n                                            message: 'The input is not valid E-mail!',\n                                        },\n                                        {\n                                            required: true,\n                                            message: 'Please input your E-mail!',\n                                        },\n                                    ]}>\n                                    <Input size='large' prefix={<MailOutlined />} placeholder={'Enter your Email ID.'} />\n                                </Form.Item>\n                                <Form.Item name=\"phone\">\n                                    <Input size='large' prefix={<PhoneOutlined />} placeholder={'Enter your phone number.'} />\n                                </Form.Item>\n                                <Form.Item name=\"address\">\n                                    <Input size='large' prefix={<HomeOutlined />} placeholder={'Enter your Address.'} />\n                                </Form.Item>\n                                <Form.Item name=\"class\">\n                                    <Input size='large' prefix={<AccountBookOutlined />} placeholder={'Enter your class.'} />\n                                </Form.Item>\n                                <Form.Item name=\"password\"\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: 'Please input your password!',\n                                        },\n                                    ]}\n                                    hasFeedback>\n                                    <Input.Password size='large' prefix={<KeyOutlined />} placeholder={'Enter your Password.'} />\n                                </Form.Item>\n                                <Form.Item name=\"confirmPassword\"\n                                    hasFeedback\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: 'Please confirm your password!',\n                                        },\n                                        ({ getFieldValue }) => ({\n                                            validator(_, value) {\n                                                if (!value || getFieldValue('password') === value) {\n                                                    return Promise.resolve();\n                                                }\n\n                                                return Promise.reject('The two passwords that you entered do not match!');\n                                            },\n                                        }),\n                                    ]}>\n                                    <Input.Password size='large' prefix={<KeyOutlined />} placeholder={'Re-enter your Password.'} />\n                                </Form.Item>\n                                <Form.Item >\n                                    <Button type='primary' htmlType=\"submit\" size='large' style={{ width: '100%', margin: 'auto' }}>Submit</Button>\n                                </Form.Item>\n                            </Form>\n                            <Divider />\n                            <p>Already have an account? <Link to='/login'>Login</Link></p>\n                        </Card>\n                    </Col>\n\n                    <Col span={4} />\n                </Row>\n            </Content>\n        </Layout>\n    );\n}","/workspace/frontend/src/views/Dashboard/Dashboard.tsx",["76"],"/workspace/frontend/src/components/Dashboard/EForms.tsx",[],"/workspace/frontend/src/views/HomePage/About.tsx",[],"/workspace/frontend/src/index.tsx",[],"/workspace/frontend/src/views/HomePage/CourseData.js",[],"/workspace/frontend/src/reportWebVitals.ts",[],"/workspace/frontend/src/views/HomePage/FAQ.tsx",[],"/workspace/frontend/src/components/Footer.tsx",[],["77","78"],"/workspace/frontend/src/views/HomePage/Courses.tsx",["79"],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":11,"column":12,"nodeType":"86","messageId":"87","endLine":11,"endColumn":17},{"ruleId":"84","severity":1,"message":"88","line":11,"column":19,"nodeType":"86","messageId":"87","endLine":11,"endColumn":27},{"ruleId":"89","severity":1,"message":"90","line":51,"column":29,"nodeType":"91","endLine":51,"endColumn":32},{"ruleId":"84","severity":1,"message":"92","line":2,"column":17,"nodeType":"86","messageId":"87","endLine":2,"endColumn":25},{"ruleId":"84","severity":1,"message":"93","line":4,"column":16,"nodeType":"86","messageId":"87","endLine":4,"endColumn":19},{"ruleId":"80","replacedBy":"94"},{"ruleId":"82","replacedBy":"95"},{"ruleId":"84","severity":1,"message":"96","line":1,"column":20,"nodeType":"86","messageId":"87","endLine":1,"endColumn":24},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"@typescript-eslint/no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","'setstate' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","'Row' is defined but never used.",["97"],["98"],"'Card' is defined but never used.","no-global-assign","no-unsafe-negation"]