[{"/workspace/frontend/src/components/Footer.tsx":"1","/workspace/frontend/src/components/Test/QuestionComponents/InputComponent.tsx":"2","/workspace/frontend/src/index.tsx":"3","/workspace/frontend/src/context/User/UserReducer.tsx":"4","/workspace/frontend/src/components/Test/QuestionComponents/MCQComponent.tsx":"5","/workspace/frontend/src/components/Dashboard/Questions/QuestionBank.tsx":"6","/workspace/frontend/src/components/Dashboard/Questions/DifficultyLevel.js":"7","/workspace/frontend/src/components/Dashboard/Questions/QuestionModal.tsx":"8","/workspace/frontend/src/components/Dashboard/Blogs/BlogsTable.tsx":"9","/workspace/frontend/src/components/Dashboard/Blogs/CreateBlog.tsx":"10","/workspace/frontend/src/views/Dashboard/Dashboard.tsx":"11","/workspace/frontend/src/components/Dashboard/EForms/EForms.tsx":"12","/workspace/frontend/src/reportWebVitals.ts":"13","/workspace/frontend/src/components/Navbar.tsx":"14","/workspace/frontend/src/components/Test/TestDetails.tsx":"15","/workspace/frontend/src/components/Dashboard/Profile/Profile.tsx":"16","/workspace/frontend/src/components/Dashboard/EForms/EFormSettings.tsx":"17","/workspace/frontend/src/components/Dashboard/Tests/TestsPage.tsx":"18","/workspace/frontend/src/components/Dashboard/Tests/TestTypes.tsx":"19","/workspace/frontend/src/components/Dashboard/EForms/EFormModal.tsx":"20","/workspace/frontend/src/components/Dashboard/Tests/TestTypeModal.tsx":"21","/workspace/frontend/src/components/Util/AdvTable.jsx":"22","/workspace/frontend/src/components/Dashboard/Questions/ReportedQuestions.tsx":"23","/workspace/frontend/src/components/Dashboard/Tests/LiveTests.tsx":"24","/workspace/frontend/src/components/Dashboard/Questions/AddQuestion.tsx":"25"},{"size":4128,"mtime":1623729426867,"results":"26","hashOfConfig":"27"},{"size":1709,"mtime":1619277773220,"results":"28","hashOfConfig":"27"},{"size":607,"mtime":1617379026832,"results":"29","hashOfConfig":"27"},{"size":1560,"mtime":1622954652448,"results":"30","hashOfConfig":"27"},{"size":2113,"mtime":1619249443005,"results":"31","hashOfConfig":"27"},{"size":5381,"mtime":1624433683113,"results":"32","hashOfConfig":"27"},{"size":223,"mtime":1614962687762,"results":"33","hashOfConfig":"27"},{"size":10036,"mtime":1624430712765,"results":"34","hashOfConfig":"27"},{"size":2303,"mtime":1624427929297,"results":"35","hashOfConfig":"27"},{"size":3298,"mtime":1624259715267,"results":"36","hashOfConfig":"27"},{"size":5357,"mtime":1624259978351,"results":"37","hashOfConfig":"27"},{"size":2872,"mtime":1624428047321,"results":"38","hashOfConfig":"27"},{"size":440,"mtime":1614962687762,"results":"39","hashOfConfig":"27"},{"size":8193,"mtime":1624168087954,"results":"40","hashOfConfig":"27"},{"size":2936,"mtime":1619277214980,"results":"41","hashOfConfig":"27"},{"size":4055,"mtime":1621069712679,"results":"42","hashOfConfig":"27"},{"size":2038,"mtime":1624374516190,"results":"43","hashOfConfig":"27"},{"size":3939,"mtime":1624427999185,"results":"44","hashOfConfig":"27"},{"size":2215,"mtime":1624428524469,"results":"45","hashOfConfig":"27"},{"size":1837,"mtime":1623729436459,"results":"46","hashOfConfig":"27"},{"size":6404,"mtime":1624428478793,"results":"47","hashOfConfig":"27"},{"size":881,"mtime":1624428799329,"results":"48","hashOfConfig":"27"},{"size":3249,"mtime":1624427971665,"results":"49","hashOfConfig":"27"},{"size":2190,"mtime":1624427983265,"results":"50","hashOfConfig":"27"},{"size":3034,"mtime":1624430516113,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1b3atdm",{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/workspace/frontend/src/components/Footer.tsx",[],["104","105"],"/workspace/frontend/src/components/Test/QuestionComponents/InputComponent.tsx",["106","107","108","109","110","111","112"],"/workspace/frontend/src/index.tsx",[],"/workspace/frontend/src/context/User/UserReducer.tsx",[],"/workspace/frontend/src/components/Test/QuestionComponents/MCQComponent.tsx",["113","114"],"/workspace/frontend/src/components/Dashboard/Questions/QuestionBank.tsx",[],"/workspace/frontend/src/components/Dashboard/Questions/DifficultyLevel.js",[],"/workspace/frontend/src/components/Dashboard/Questions/QuestionModal.tsx",[],"/workspace/frontend/src/components/Dashboard/Blogs/BlogsTable.tsx",["115"],"/workspace/frontend/src/components/Dashboard/Blogs/CreateBlog.tsx",[],"/workspace/frontend/src/views/Dashboard/Dashboard.tsx",[],"/workspace/frontend/src/components/Dashboard/EForms/EForms.tsx",["116"],"/workspace/frontend/src/reportWebVitals.ts",[],"/workspace/frontend/src/components/Navbar.tsx",["117"],"/workspace/frontend/src/components/Test/TestDetails.tsx",[],"/workspace/frontend/src/components/Dashboard/Profile/Profile.tsx",[],"/workspace/frontend/src/components/Dashboard/EForms/EFormSettings.tsx",[],"/workspace/frontend/src/components/Dashboard/Tests/TestsPage.tsx",["118"],"/workspace/frontend/src/components/Dashboard/Tests/TestTypes.tsx",["119"],"/workspace/frontend/src/components/Dashboard/EForms/EFormModal.tsx",[],"/workspace/frontend/src/components/Dashboard/Tests/TestTypeModal.tsx",["120","121"],"import { Button, Modal, Form, Select, Space, Input, TimePicker, Divider, message } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport axios from \"axios\";\n\n\nconst { REACT_APP_NODEJS_URL } = process.env;\n\nconst { Option } = Select;\ninterface TestTypeInterface {\n  Test?: {\n    testTypeID: number;\n    testname: string;\n    subjectsallowed: string[];\n    questions: Array<{\n      type: string;\n      correct: number;\n      wrong: number;\n      nullanswer: number;\n      number: number;\n    }>;\n  };\n  buttonText: string;\n  getFunction?: Function;\n}\nexport const TestTypeModal: React.FC<TestTypeInterface> = ({\n  Test,\n  buttonText,\n  getFunction\n}) => {\n  const [visible, setVisible] = useState(false);\n  const [form] = Form.useForm();\n  const [time, setTime] = useState('')\n  const toSubmit = (e: any) => {\n    console.log(e);\n  };\n  useEffect(() => {\n    console.log(Test)\n  }, [Test])\n  const SubmitTest = async (values: TestTypeInterface) => {\n    console.log(values);\n    try {\n      const response = await axios.post(\n        `http://${REACT_APP_NODEJS_URL}/admin/statictest`,\n        {\n          values,\n          //time,\n        },\n        {\n          headers: {\n            authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n          },\n        }\n      );\n      message.success(\"Created a test sucessfully!\")\n      if (getFunction) {\n        getFunction();\n      }\n    } catch (e) {\n      console.log(e)\n      message.error(\"Something went wrong\")\n    }\n  };\n  const onChangeTime = (value: any, timeString: string) => {\n    setTime(timeString)\n  }\n  return (\n    <>\n      <Button onClick={() => setVisible(true)}>{buttonText}</Button>\n      <Modal\n        width=\"60%\"\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        onOk={() => {\n          var values = form.getFieldsValue();\n          console.log(values);\n          form.resetFields();\n          if (Test !== undefined) {\n            values.qid = Test.testTypeID;\n          } else {\n            SubmitTest(values);\n          }\n          setVisible(false);\n        }}\n      >\n        <h1>Create Static Test</h1>\n        <Divider />\n        <br />\n        <Form\n          name=\"TestType\"\n          layout=\"vertical\"\n          form={form}\n          onFinish={toSubmit}\n          initialValues={Test}\n        >\n          <Form.Item label=\"Test Name\" name=\"testname\">\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"Subjects\" name=\"subjectsallowed\">\n            <Select mode=\"multiple\">\n              <Option value=\"physics\" label=\"Physics\">\n                Physics\n              </Option>\n              <Option value=\"chemistry\" label=\"Chemistry\">\n                Chemistry\n              </Option>\n              <Option value=\"maths\" label=\"Maths\">\n                Maths\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.List name=\"questions\">\n            {(fields, { add, remove }) => (\n              <>\n                {fields.map((field) => (\n                  <Space\n                    key={field.key}\n                    style={{ display: \"flex\", marginBottom: 8, width: \"100%\" }}\n                    align=\"baseline\"\n                  >\n                    <Form.Item\n                      shouldUpdate={(prevValues, curValues) =>\n                        prevValues.area !== curValues.area ||\n                        prevValues.sights !== curValues.sights\n                      }\n                    >\n                      {() => (\n                        <Form.Item\n                          {...field}\n                          name={[field.name, \"type\"]}\n                          label=\"Question Type\"\n                        >\n                          <Select placeholder='Select Question Type'>\n                            <Option value=\"mcq\">MCQ</Option>\n                            <Option value=\"fib\">Fill in the blanks</Option>\n                            <Option value=\"anr\">Assertion and Reason</Option>\n                            <Option value=\"tof\">True or False</Option>\n                            <Option value=\"num\">Numerical Question</Option>\n                            <Option value=\"mtf\">\n                              Match the Following Questions\n                            </Option>\n                          </Select>\n                        </Form.Item>\n                      )}\n                    </Form.Item>\n\n                    <Form.Item\n                      {...field}\n                      fieldKey={[field.fieldKey, \"number\"]}\n                      name={[field.name, \"number\"]}\n                      label=\"Number of Questions\"\n                    >\n                      <Input />\n                    </Form.Item>\n                    <Form.Item\n                      {...field}\n                      fieldKey={[field.fieldKey, \"correct\"]}\n                      name={[field.name, \"correct\"]}\n                      label=\"Correct Answer Marks\"\n                    >\n                      <Input />\n                    </Form.Item>\n                    <Form.Item\n                      {...field}\n                      name={[field.name, \"wrong\"]}\n                      label=\"Wrong Answer Marks\"\n                    >\n                      <Input />\n                    </Form.Item>\n                    <Form.Item\n                      {...field}\n                      name={[field.name, \"nullanswer\"]}\n                      label=\"No Answer Marks\"\n                    >\n                      <Input />\n                    </Form.Item>\n                    <MinusCircleOutlined onClick={() => remove(field.name)} />\n                  </Space>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add field\n                  </Button>\n                </Form.Item>\n              </>\n            )}\n          </Form.List>\n          <Form.Item name='startDate' label=\"Select time of test [HH:mm]\">\n            <Space direction=\"horizontal\" size={12}>\n              <TimePicker onChange={onChangeTime} format={\"HH:mm\"} />\n            </Space>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};\n","/workspace/frontend/src/components/Util/AdvTable.jsx",[],"/workspace/frontend/src/components/Dashboard/Questions/ReportedQuestions.tsx",["122"],"/workspace/frontend/src/components/Dashboard/Tests/LiveTests.tsx",["123","124"],"/workspace/frontend/src/components/Dashboard/Questions/AddQuestion.tsx",["125","126"],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":1,"column":10,"nodeType":"133","messageId":"134","endLine":1,"endColumn":15},{"ruleId":"131","severity":1,"message":"135","line":1,"column":22,"nodeType":"133","messageId":"134","endLine":1,"endColumn":25},{"ruleId":"131","severity":1,"message":"136","line":1,"column":27,"nodeType":"133","messageId":"134","endLine":1,"endColumn":43},{"ruleId":"131","severity":1,"message":"137","line":25,"column":9,"nodeType":"133","messageId":"134","endLine":25,"endColumn":14},{"ruleId":"131","severity":1,"message":"138","line":26,"column":11,"nodeType":"133","messageId":"134","endLine":26,"endColumn":21},{"ruleId":"131","severity":1,"message":"139","line":32,"column":11,"nodeType":"133","messageId":"134","endLine":32,"endColumn":30},{"ruleId":"131","severity":1,"message":"140","line":36,"column":9,"nodeType":"133","messageId":"134","endLine":36,"endColumn":13},{"ruleId":"131","severity":1,"message":"137","line":25,"column":7,"nodeType":"133","messageId":"134","endLine":25,"endColumn":12},{"ruleId":"131","severity":1,"message":"140","line":36,"column":7,"nodeType":"133","messageId":"134","endLine":36,"endColumn":11},{"ruleId":"131","severity":1,"message":"141","line":1,"column":33,"nodeType":"133","messageId":"134","endLine":1,"endColumn":38},{"ruleId":"131","severity":1,"message":"141","line":1,"column":16,"nodeType":"133","messageId":"134","endLine":1,"endColumn":21},{"ruleId":"131","severity":1,"message":"142","line":125,"column":10,"nodeType":"133","messageId":"134","endLine":125,"endColumn":17},{"ruleId":"131","severity":1,"message":"141","line":1,"column":40,"nodeType":"133","messageId":"134","endLine":1,"endColumn":45},{"ruleId":"143","severity":1,"message":"144","line":60,"column":6,"nodeType":"145","endLine":60,"endColumn":8,"suggestions":"146"},{"ruleId":"131","severity":1,"message":"147","line":33,"column":10,"nodeType":"133","messageId":"134","endLine":33,"endColumn":14},{"ruleId":"131","severity":1,"message":"148","line":43,"column":13,"nodeType":"133","messageId":"134","endLine":43,"endColumn":21},{"ruleId":"131","severity":1,"message":"141","line":1,"column":16,"nodeType":"133","messageId":"134","endLine":1,"endColumn":21},{"ruleId":"131","severity":1,"message":"141","line":1,"column":16,"nodeType":"133","messageId":"134","endLine":1,"endColumn":21},{"ruleId":"143","severity":1,"message":"144","line":61,"column":6,"nodeType":"145","endLine":61,"endColumn":8,"suggestions":"149"},{"ruleId":"131","severity":1,"message":"141","line":1,"column":16,"nodeType":"133","messageId":"134","endLine":1,"endColumn":21},{"ruleId":"131","severity":1,"message":"148","line":34,"column":13,"nodeType":"133","messageId":"134","endLine":34,"endColumn":21},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"@typescript-eslint/no-unused-vars","'Radio' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'RadioChangeEvent' is defined but never used.","'Latex' is assigned a value but never used.","'radioStyle' is assigned a value but never used.","'radioContainerStyle' is assigned a value but never used.","'temp' is assigned a value but never used.","'Table' is defined but never used.","'current' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchTestDetails'. Either include it or remove the dependency array.","ArrayExpression",["152"],"'time' is assigned a value but never used.","'response' is assigned a value but never used.",["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"154","fix":"156"},"Update the dependencies array to be: [fetchTestDetails]",{"range":"157","text":"158"},{"range":"159","text":"158"},[1304,1306],"[fetchTestDetails]",[1314,1316]]